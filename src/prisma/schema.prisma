// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id                     String                  @id @default(uuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          Boolean                 @default(false) @map("email_verified")
  passwordHash           String?                 @map("password_hash")
  image                  String?
  mainCurrencyId         String                  @default("b6ecaefd-510d-47cf-83a1-b96494496a84") @map("main_currency_id")
  mainCurrency           Currency                @relation(fields: [mainCurrencyId], references: [id], onDelete: Cascade)
  sessions               Session[]
  oAuthAccounts           OAuthAccount[]
  financialAccounts      FinancialAccount[]
  subscriptions          Subscription[]
  accountCategories      AccountCategory[]
  transactionCategories  TransactionCategory[]
  emailVerificationCodes EmailVerificationCode[]
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")

  @@map("users")
}

model OAuthAccount {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  providerId     String   @map("provider_id")
  providerUserId String   @map("provider_user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("oauth_accounts")
}

model EmailVerificationCode {
  id        String   @id @default(uuid())
  code      String
  userId    String   @map("user_id")
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model FinancialAccount {
  id              String          @id @default(uuid())
  name            String
  userId          String          @map("user_id")
  categoryId      String          @map("category_id")
  currencyId      String          @map("currency_id")
  initialValue    BigInt          @map("initial_value")
  transactions    Transaction[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountCategory AccountCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  currency        Currency        @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("financial_accounts")
}

model AccountType {
  id                String            @id @default(uuid())
  name              String
  accountCategories AccountCategory[]
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("account_types")
}

model AccountCategory {
  id                String             @id @default(uuid())
  name              String
  typeId            String             @map("type_id")
  userId            String?            @map("user_id")
  icon              String
  financialAccounts FinancialAccount[]
  accountType       AccountType        @relation(fields: [typeId], references: [id], onDelete: Cascade)
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("account_categories")
}

model Transaction {
  id                  String               @id @default(uuid())
  description         String
  date                DateTime
  amount              BigInt
  rate                Float?
  accountId           String               @map("account_id")
  categoryId          String?              @map("category_id")
  currencyId          String               @map("currency_id")
  financialAccount    FinancialAccount     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactionCategory TransactionCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  currency            Currency             @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  @@map("transactions")
}

model TransactionType {
  id                    String                @id @default(uuid())
  name                  String
  transactionCategories TransactionCategory[]
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  @@map("transaction_types")
}

model TransactionCategory {
  id              String          @id @default(uuid())
  name            String
  typeId          String          @map("type_id")
  userId          String?         @map("user_id")
  transactions    Transaction[]
  transactionType TransactionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("transaction_categories")
}

model Subscription {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  typeId           String           @map("type_id")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionType SubscriptionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model SubscriptionType {
  id            String         @id @default(uuid())
  name          String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  subscriptions Subscription[]

  @@map("subscription_types")
}

model Currency {
  id           String             @id @default(uuid())
  code         String             @unique
  name         String
  symbol       String
  rate         Float
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  accounts     FinancialAccount[]
  transactions Transaction[]
  users        User[]

  @@map("currencies")
}
