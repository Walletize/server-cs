// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model User {
  id                    String                @id @default(uuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?             @map("email_verified")
  image                 String?
  accounts              Account[]
  sessions              Session[]
  financialAccounts     FinancialAccount[]
  subscriptions         Subscription[]
  accountCategories     AccountCategory[]
  transactionCategories TransactionCategory[]
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FinancialAccount {
  id              String          @id @default(uuid())
  name            String
  userId          String          @map("user_id")
  categoryId      String          @map("category_id")
  initialValue    BigInt          @map("initial_value")
  currentValue    BigInt          @map("current_value")
  transactions    Transaction[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountCategory AccountCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("financial_accounts")
}

model AccountType {
  id                String            @id @default(uuid())
  name              String
  accountCategories AccountCategory[]
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("account_types")
}

model AccountCategory {
  id                String             @id @default(uuid())
  name              String
  typeId            String             @map("type_id")
  userId            String?            @map("user_id")
  icon              String
  financialAccounts FinancialAccount[]
  accountType       AccountType        @relation(fields: [typeId], references: [id], onDelete: Cascade)
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  @@map("account_categories")
}

model Transaction {
  id                  String              @id @default(uuid())
  description         String
  date                DateTime
  amount              BigInt
  accountId           String              @map("account_id")
  categoryId          String              @map("category_id")
  financialAccount    FinancialAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactionCategory TransactionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")

  @@map("transactions")
}

model TransactionType {
  id                    String                @id @default(uuid())
  name                  String
  transactionCategories TransactionCategory[]
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  @@map("transaction_types")
}

model TransactionCategory {
  id              String          @id @default(uuid())
  name            String
  typeId          String          @map("type_id")
  userId          String?         @map("user_id")
  transactions    Transaction[]
  transactionType TransactionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("transaction_categories")
}

model Subscription {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  typeId           String           @map("type_id")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionType SubscriptionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@map("subscriptions")
}

model SubscriptionType {
  id            String         @id @default(uuid())
  name          String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  subscriptions Subscription[]

  @@map("subscription_types")
}
